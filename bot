import requests
import time
import datetime
from tradingview_ta import TA_Handler, Interval, Exchange
import time
import datetime

dog = TA_Handler(
    symbol="DOGEUSDT",
    screener="crypto",
    exchange="binance",
    interval=Interval.INTERVAL_1_MINUTE
)

possibilities = ["STRONG_BUY", "BUY", "NEUTRAL", "SELL", "STRONG_SELL", "ERROR"]

def signal():
    analysis = dog.get_analysis()
    # print(analysis.summary)
    # print(analysis.indicators)
    Recom = analysis.summary
    return Recom['RECOMMENDATION']


class BotHandler:
 
    def __init__(self, token):
        self.token = token
        self.api_url = "https://api.telegram.org/bot{}/".format(token)
    
    def get_updates(self, offset=None, timeout=30):
        method = 'getUpdates'
        params = {'timeout': timeout, 'offset': offset}
        resp = requests.get(self.api_url + method, params)
        result_json = resp.json()['result']
        return result_json
    
    def send_message(self, chat_id, text):
        params = {'chat_id': chat_id, 'text': text}
        method = 'sendMessage'
        resp = requests.post(self.api_url + method, params)
        return resp
    
    def get_last_update(self):
        get_result = self.get_updates()
    
        if len(get_result) > 0 :
                    last_update = get_result[-1]
        else:
            last_update = get_result[len(get_result)]
        
        return last_update

token='1783819440:AAH92F9Lzi_gguYedWQMizYAlC1n1IpGlag'


greet_bot = BotHandler(token)  
greetings = ('hello', 'hi', 'greetings', 'sup')  
now = datetime.datetime.now()
 
def sm(msg):  
    new_offset = None
    greet_bot.get_updates(new_offset)
    
    last_update = greet_bot.get_last_update()
        
    last_update_id = last_update['update_id']
    last_chat_text = last_update['message']['text']
    last_chat_id = last_update['message']['chat']['id']
    last_chat_name = last_update['message']['chat']['first_name']
    greet_bot.send_message(last_chat_id, msg)

while True:
    if __name__ == '__main__':  
        try:
            old_value=signal()
            time.sleep(0.04)
            present_value=signal()
            sm(str('starting the bot...'))
            if present_value!=old_value:
                sm(str(present_value))           
        except KeyboardInterrupt:
            exit()
